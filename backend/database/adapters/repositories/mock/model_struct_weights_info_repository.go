// Code generated by mockery v2.11.0. DO NOT EDIT.

package mock

import (
	repositories "neural_storage/cube/core/ports/repositories"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	time "time"

	weights "neural_storage/cube/core/entities/structure/weights"

	weightsstat "neural_storage/cube/core/entities/structure/weights/weightsstat"
)

// ModelStructWeightsInfoRepository is an autogenerated mock type for the ModelStructWeightsInfoRepository type
type ModelStructWeightsInfoRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: structure, info
func (_m *ModelStructWeightsInfoRepository) Add(structure string, info []weights.Info) ([]string, error) {
	ret := _m.Called(structure, info)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, []weights.Info) []string); ok {
		r0 = rf(structure, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []weights.Info) error); ok {
		r1 = rf(structure, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: info
func (_m *ModelStructWeightsInfoRepository) Delete(info []weights.Info) error {
	ret := _m.Called(info)

	var r0 error
	if rf, ok := ret.Get(0).(func([]weights.Info) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: filter
func (_m *ModelStructWeightsInfoRepository) Find(filter repositories.StructWeightsInfoFilter) ([]*weights.Info, error) {
	ret := _m.Called(filter)

	var r0 []*weights.Info
	if rf, ok := ret.Get(0).(func(repositories.StructWeightsInfoFilter) []*weights.Info); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*weights.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(repositories.StructWeightsInfoFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: weightsId
func (_m *ModelStructWeightsInfoRepository) Get(weightsId string) (*weights.Info, error) {
	ret := _m.Called(weightsId)

	var r0 *weights.Info
	if rf, ok := ret.Get(0).(func(string) *weights.Info); ok {
		r0 = rf(weightsId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weights.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(weightsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddStat provides a mock function with given fields: from, to
func (_m *ModelStructWeightsInfoRepository) GetAddStat(from time.Time, to time.Time) ([]*weightsstat.Info, error) {
	ret := _m.Called(from, to)

	var r0 []*weightsstat.Info
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []*weightsstat.Info); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*weightsstat.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpdateStat provides a mock function with given fields: from, to
func (_m *ModelStructWeightsInfoRepository) GetUpdateStat(from time.Time, to time.Time) ([]*weightsstat.Info, error) {
	ret := _m.Called(from, to)

	var r0 []*weightsstat.Info
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []*weightsstat.Info); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*weightsstat.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: info
func (_m *ModelStructWeightsInfoRepository) Update(info weights.Info) error {
	ret := _m.Called(info)

	var r0 error
	if rf, ok := ret.Get(0).(func(weights.Info) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewModelStructWeightsInfoRepository creates a new instance of ModelStructWeightsInfoRepository. It also registers a cleanup function to assert the mocks expectations.
func NewModelStructWeightsInfoRepository(t testing.TB) *ModelStructWeightsInfoRepository {
	mock := &ModelStructWeightsInfoRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
