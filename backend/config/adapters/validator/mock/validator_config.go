// Code generated by mockery v2.11.0. DO NOT EDIT.

package mock

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// ValidatorConfig is an autogenerated mock type for the ValidatorConfig type
type ValidatorConfig struct {
	mock.Mock
}

// IsMocked provides a mock function with given fields:
func (_m *ValidatorConfig) IsMocked() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MaxPwdLen provides a mock function with given fields:
func (_m *ValidatorConfig) MaxPwdLen() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MaxUnameLen provides a mock function with given fields:
func (_m *ValidatorConfig) MaxUnameLen() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MinPwdLen provides a mock function with given fields:
func (_m *ValidatorConfig) MinPwdLen() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MinUnameLen provides a mock function with given fields:
func (_m *ValidatorConfig) MinUnameLen() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewValidatorConfig creates a new instance of ValidatorConfig. It also registers a cleanup function to assert the mocks expectations.
func NewValidatorConfig(t testing.TB) *ValidatorConfig {
	mock := &ValidatorConfig{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
