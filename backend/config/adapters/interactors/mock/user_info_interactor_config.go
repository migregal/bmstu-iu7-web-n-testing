// Code generated by mockery v2.11.0. DO NOT EDIT.

package mock

import (
	config "neural_storage/cube/core/ports/config"

	mock "github.com/stretchr/testify/mock"

	portsconfig "neural_storage/database/core/ports/config"

	testing "testing"
)

// UserInfoInteractorConfig is an autogenerated mock type for the UserInfoInteractorConfig type
type UserInfoInteractorConfig struct {
	mock.Mock
}

// NormalizerConfig provides a mock function with given fields:
func (_m *UserInfoInteractorConfig) NormalizerConfig() config.NormalizerConfig {
	ret := _m.Called()

	var r0 config.NormalizerConfig
	if rf, ok := ret.Get(0).(func() config.NormalizerConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.NormalizerConfig)
		}
	}

	return r0
}

// RepoConfig provides a mock function with given fields:
func (_m *UserInfoInteractorConfig) RepoConfig() portsconfig.UserInfoRepositoryConfig {
	ret := _m.Called()

	var r0 portsconfig.UserInfoRepositoryConfig
	if rf, ok := ret.Get(0).(func() portsconfig.UserInfoRepositoryConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(portsconfig.UserInfoRepositoryConfig)
		}
	}

	return r0
}

// ValidatorConfig provides a mock function with given fields:
func (_m *UserInfoInteractorConfig) ValidatorConfig() config.ValidatorConfig {
	ret := _m.Called()

	var r0 config.ValidatorConfig
	if rf, ok := ret.Get(0).(func() config.ValidatorConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.ValidatorConfig)
		}
	}

	return r0
}

// NewUserInfoInteractorConfig creates a new instance of UserInfoInteractorConfig. It also registers a cleanup function to assert the mocks expectations.
func NewUserInfoInteractorConfig(t testing.TB) *UserInfoInteractorConfig {
	mock := &UserInfoInteractorConfig{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
